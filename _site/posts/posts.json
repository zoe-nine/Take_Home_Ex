[
  {
    "path": "posts/2022-02-12-dataviz-makeover-1/",
    "title": "DataViz Makeover 1",
    "description": "In this post, a population labour participation rate data case applying the fundamentals of Visual Analytics using Tableau will be presented. I will critique the visualisation and propose an alternative for improvement.",
    "author": [
      {
        "name": "Zhang Yi",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-02-12",
    "categories": [],
    "contents": "\n1.0 Critique of Visualisation\nThe original visualisation is created by using data provided by Ministry of Manpower, Singapore (MOM). The data are available under the page entitle Statistical Table: Labour Force.\n\n1.1 Clarity\nTitle:\nThe title of the graph did not convey a clear message. It only says that the visualisation is about labour force participation rate (LFPR) without stating the data origin and time period covered. Hence, we do not know the participation rate is about which particular group of people for a period of how long. In fact, these are Singapore female population’s labour force participation rates for a time period ranging from 2010 to 2021.\nThe title did not specify granularity of measurement for the data presented (e.g. yearly, monthly or weekly).\nThe title did not specify the unit of measure for the rate, which is percent.\nNo insights highlighted from the title.\n\nY-axis:\nThe Y axis use the acronym of ‘Lfpr’ directly when the title of the graph did not introduce it in parentheses after the full term.\nThe Y axis did not indicate the unit of measurement for labour force participation rate, which is percent.\n\nX-axis: The X-axis labels are fully labelled unnecessarily, which could then be misleading. From the graph, it is clear that the labour force participation rates are plotted over a time period (which is from 2010 to 2021). However, the x-axis label only could show ‘2015’ because each subplot becomes too narrow when the area graphs for all age group are squeezed together.\nGrouping of data: Looking at the age groups used, there is redundancy resulted from overlapping between the age group of ‘70 & above’ and the two age groups of ‘70 to 74’ and ‘75 & above’. Including all three groups would be unnecessary as the LFPR among ‘70 to 74’ and ‘75 & above’ are already somewhat reflected in the group of ‘70 & above’.\nAnnotation: There is no annotation in the graph highlighting important findings.\nSource: There is not caption indicating source of data.\n1.2 Aesthetic\nAxis Labels: The axis labels for X-axis are repetitive.\nOrder of Graph: There is no clear logic behind the ordering of area plots for various age group. A guess based on the graph would be that these plots are sorted based on an ascending order of the sum of labour participation rate for each age group across the years. This ordering may be confusing and may not reveal an insightful pattern of how the participation rates gradually change as the population ages.\nGrid lines: The vertical grid lines are distracting.\nLegend and Shading of the graph: The color palette chosen for shading looks messy and distract viewers’ attention, especially when many age groups are involved.\n2.0 Proposed Alternative\nHere is the propsed alternative drawn by hand. \n2.1 Clarity\nTitle:\nEdit the main title to highlight important conclusions drawn from the graph.\nAdd in a sub-title to describe the context of the graph (Singapore) and specify the granularity of the data, the measurement unit for Y-Axis as well as the time period involved.\nPut LFPR in parentheses after the full term to reflect what it stands for.\n\nY-axis: Indicate the unit of measure (%).\nX-axis: Remove the repetitive labels and indicate the time period in the title section instead.\nGrouping of data: Delete the age groups of ‘70 to 74’ and ‘75 & above’ to avoid overlapping.\nAnnotation: Add in annotations to denote insightful findings for viewers.\nSource: Add in caption at the bottom of the graph to denote source of data used.\n2.2 Aesthetic\nAxis Labels: Reduce the repetitive labeling of x-axis.\nOrder of Graph: Instead of the current order, we would sort the age groups based on the the data source order, which is the the ascending order of age group.\nGrid lines: Remove the vertical grid lines.\nLegend Shading of the graph: Remove the color palette shading for different age groups as the header already shows the age range for each section, which renders the color differentiation less useful. Legend could be removed as well because the long list of colors distracts viewers when they need to keep referring to it.\n3.0 Proposed Visualisation on Tableau\nPlease view the detailed proposed alternative on Tableau Public here.\n4.0 Step-by-step Guide Using Tableau\nNo\nStep\nAction\n1\nDelete the irrelevant columns and save the rest of the table into a new sheet using Microsoft Excel.\n\n2\nImport the revised data into Tableau by dragging it into the main pane. Rename the ‘Age (Years)/Sex’ Field name into ‘Age (Years)’ by right click on the column and choose ‘Rename’.\n\n3\nPivot the data in sheet by dragging ‘Measure Values’ into ‘Columns’ and ‘Age (Years)’ into ‘Rows’ shevles.\n\n4\nRemove the years before 2010 as well as the CNT in ‘Measure Values’. The resultant ‘Measure Values’ only contain data from 2010 to 2021.\n\n5\nView the pivoted data by clicking on ‘View Table’ under ‘Analysis’ Tab.\n\n6\nExport the data by clicking on the ‘Export All’ button at the top right corner of the window.\n\n7\nRepeat Steps 1 to 6 for both males and females. Combine all three files in a new Excel Worksheet and add a column named ‘Sex’ to identify the gender. Rename the ‘Measure Names’ column to ‘Year’, ‘Measure Values’ column to ‘LFPR’. Drag this finalised file into Tableau.\n\n8\nModify LPFR from absolute value to percentage by righting clicking and creating a new calculated field called ‘LFPR (%)’, which is derived by dividing the original LPFR by 100.\n\n9\nDrag ‘Age(Years)’ and ‘Year’ into Columns shelves and ‘LFPR (%)’ into Rows shelves. Select ‘Area’ chart along the drop-down list under ‘Marks’ Card and drag ‘Sex’ over to the ‘Color’ icon Under ‘Marks’ Card. Lastly, click on ‘Analysis’ tab and turn off the ‘Stack Marks’ so that the area graphs for different sex would not stack on each other.\n\n10\nChoose the data to be displayed by right clicking and choosing ‘Edit the filters’. Untick those you do not want to display on the graph. In this case, we would untick the bottom 5 boxes under ‘Age(Years)’ to only keep age groups until ‘70 & above’. Also, untick ‘Total’ under ‘Sex’ to only focus on the difference in LFPR by gender and age groups.\n\n11\nRight click on the Y-axis to format the scale into percentage.\n\n12\nFormat ‘Measure’ Values into ‘Percentage’ accordingly.\n\n13\nSelect ‘Create Calculated Field’ under ‘Analysis’ Tab to form a new variable named ‘Lower LFPR(%)’ to exhibit the lower LFPR regardless of gender type. The new variable is formed by typing in the formula shown on the right.\n\n14\nDrag ‘Lower LFPR(%)’ variable over to the Y-axis to create a combined axis.\n\n15\nDrag ‘Measure Names’ from ‘Rows’ shelves over onto ‘Detail’ icon under ‘Marks’ Card. Change the ‘Detail’ icon of ‘Measure Names’ to ‘Color’.\n\n16\nClick on ‘Color’ icon and select ‘Edit Color’ to change color of the ‘Lower LFPR’ variables for males and females to white. Change the color of female and male LFPR to a lighter pink and blue color for better visualisation purpose later. Set opacity of color to 100%.\n\n17\nDrag ‘LFPR (%)’ to the secondary Y-axis on the right side of the chart. Click on the new section named ‘SUM(LFPR(%))’ under ‘Marks’. Change the chart type to ‘Line’ using the drop-down list and remove ‘Measure Names’ under the section.\n\n18\nMake the secondary Y-axis invisible by right click to edit axis. Then delete the axis title and set tick marks to ‘None’. Remove the repetitive labels of time period along X-axis by right click on the ‘Year’ variable and untick the ‘Show Header’ option.\n\n19\nAdd in annotations by right click at a place on the chart. Choose ‘Annotate’ and then ‘Area’ to add in any trends/ important findings discovered.\n\n20\nEdit the title, subtitle and caption accordingly.\n\n21\nThe final tableau chart is produced.\n\n5.0 Important Findings\nFor age groups from 30 to 54, more females are entering into the workforce as seen from the significant increase in LFPR. This increase is made even more obvious in comparison with working males whose LFPR remained relatively stable across the time period. This could be due to the the efforts made in empowering women to juggle their home and workplace commitments. The implementation of flexible working hours would allow women to work around their domestic schedules. In 2013, the government implemented the enhanced Work-Life Grant was introduced in 2013 to motivate companies to implement flexible work arrangements (FWAs). The increase in the number of child care centres has also helped reducing women’s care-taking responsibilities, so that more females can join the workforce after giving birth.\nA gradual and significant increase of LFPR is observed in age groups from 60 years old (both females and males) onwards. This could be due to the the government constant effort in revising retirement and re-employment related matters, which prolonged the working age of the experienced elderly. In 2012, the government has launched the Retirement and Re-employment Act, which states that workers can continue to work beyond the age of 62 if they are able and want to, and employers are required to continue hiring them. Following that, the government raised the re-employment age ceiling again to the next level of 67 from 1 July 2017.\nA sharp decrease has been observed in LFPR of both males and females age groups of 20 to 24 from 2019 to 2020. This could be possibly due to the Covid-19 break out from the start of year 2019. Plenty of the firms cut down their headcount during that year due to the adverse impact Covid-19 pandemic on their businesses. This might affect the fresh graduates the most who just stepped out of university and need to secure their first jobs. The older working adults, on the other hand, might not be affected by that much as they already had a relative stable occupation.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-13T22:59:51+08:00",
    "input_file": "dataviz-makeover-1.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Take-home Exercise",
    "description": "Welcome to my practice blog for ISSS608 Visual Analytics Applications, a course module offered in SMU.",
    "author": [
      {
        "name": "Zhang Yi",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-02-04",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-05T00:14:31+08:00",
    "input_file": "welcome.knit.md"
  },
  {
    "path": "posts/2022-02-04-take-home-exercise-2/",
    "title": "Take-home Exercise 2",
    "description": "In this take-home exercise 2, I would apply relevant interactivity and animation methods to create an interactive data visualisation with RStudio.",
    "author": [
      {
        "name": "Zhang Yi",
        "url": "https://www.linkedin.com/in/zhangyii/"
      }
    ],
    "date": "2022-02-03",
    "categories": [],
    "contents": "\n1.0 Introduction\nThis take-home exercise aims to explore the use of interactivity and animation methods to create an interactive age-sex pyramid based data visualisation with R. By allowing the graphics to be interactive, the changes of demographic structure of Singapore by age cohort and gender at planning area level would be demonstrated clearly to the viewers.\nFor this exercise, the data sets used are Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2000-2010 and June 2011-2020, which could be downloaded from Department of Statistics home page.\nBefore processing to the next section, please use the code chunk below to install and launch the required packages in RStudio.\n\n\npackages = c('ggiraph', 'plotly', \n             'DT', 'patchwork', \n             'gganimate', 'tidyverse', \n             'readxl', 'gifski', 'gapminder')\n\nfor (p in packages){\nif (!require(p, character.only = T)){\n  install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\n\n\n2.0 Proposed Sketch\nTo achieve data visualisation at the planning area level, a proposed sketch is created as below.\n\n3.0 Data Preparation\nImporting Data\nUsing read_csv() of readr package, we first read the two sets of data (namely, Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2000-2010.csv and Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020.csv) used for this exercise into tibbles.\n\n\npopulation_1 <- read_csv(\"Data/respopagesextod2000to2010.csv\")\npopulation_2 <- read_csv(\"Data/respopagesextod2011to2020.csv\")\ntbl_df(population_1)\n\n\n# A tibble: 1,040,592 × 7\n   PA         SZ        AG     Sex     TOD                   Pop  Time\n   <chr>      <chr>     <chr>  <chr>   <chr>               <dbl> <dbl>\n 1 Ang Mo Kio Cheng San 0_to_4 Males   HDB 1- and 2-Room …    20  2000\n 2 Ang Mo Kio Cheng San 0_to_4 Males   HDB 3-Room Flats      480  2000\n 3 Ang Mo Kio Cheng San 0_to_4 Males   HDB 4-Room Flats      220  2000\n 4 Ang Mo Kio Cheng San 0_to_4 Males   HDB 5-Room and Exe…    80  2000\n 5 Ang Mo Kio Cheng San 0_to_4 Males   HUDC Flats (exclud…     0  2000\n 6 Ang Mo Kio Cheng San 0_to_4 Males   Landed Properties       0  2000\n 7 Ang Mo Kio Cheng San 0_to_4 Males   Condominiums and O…     0  2000\n 8 Ang Mo Kio Cheng San 0_to_4 Males   Others                  0  2000\n 9 Ang Mo Kio Cheng San 0_to_4 Females HDB 1- and 2-Room …    20  2000\n10 Ang Mo Kio Cheng San 0_to_4 Females HDB 3-Room Flats      390  2000\n# … with 1,040,582 more rows\n\ntbl_df(population_2)\n\n\n# A tibble: 984,656 × 7\n   PA         SZ                     AG     Sex     TOD      Pop  Time\n   <chr>      <chr>                  <chr>  <chr>   <chr>  <dbl> <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3…    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4…    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5…    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC …     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Lande…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condo…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others     0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3…    10  2011\n# … with 984,646 more rows\n\nMerging two dataframes\nAs the both data sets have the same number of columns and the same column names, we could merge the two data sets int one by using rbind() fucntion. This function enables the users to stack the two data frames on top of each other, appending the second data frame to the first.\n\n\npopulation <-rbind(population_1, population_2)\ntbl_df(population)\n\n\n# A tibble: 2,025,248 × 7\n   PA         SZ        AG     Sex     TOD                   Pop  Time\n   <chr>      <chr>     <chr>  <chr>   <chr>               <dbl> <dbl>\n 1 Ang Mo Kio Cheng San 0_to_4 Males   HDB 1- and 2-Room …    20  2000\n 2 Ang Mo Kio Cheng San 0_to_4 Males   HDB 3-Room Flats      480  2000\n 3 Ang Mo Kio Cheng San 0_to_4 Males   HDB 4-Room Flats      220  2000\n 4 Ang Mo Kio Cheng San 0_to_4 Males   HDB 5-Room and Exe…    80  2000\n 5 Ang Mo Kio Cheng San 0_to_4 Males   HUDC Flats (exclud…     0  2000\n 6 Ang Mo Kio Cheng San 0_to_4 Males   Landed Properties       0  2000\n 7 Ang Mo Kio Cheng San 0_to_4 Males   Condominiums and O…     0  2000\n 8 Ang Mo Kio Cheng San 0_to_4 Males   Others                  0  2000\n 9 Ang Mo Kio Cheng San 0_to_4 Females HDB 1- and 2-Room …    20  2000\n10 Ang Mo Kio Cheng San 0_to_4 Females HDB 3-Room Flats      390  2000\n# … with 2,025,238 more rows\n\nWrangling data\nSelecting relevant columns and fixing order\nTo illustrate the demographic structure change of Singapore by age cohort and gender at planning area level across years, 5 columns would be kept by using select() function: Planning Area, Age Group, Sex, Population and Time. Then, we would preserve order of appearance of the age group (initially ranged from smallest to largest) and fix the order by using factor() function.\n\n\npopulation <- population %>%\n  select(PA, AG, Sex, Pop, Time) \n\nAG_orders <- unique(population$AG)\npopulation$AG <- factor(population$AG, levels = AG_orders, ordered = TRUE)\n\n\n\nComputing the population count\nThen data set would be grouped by Planning Area, Age Group, Sex and Time. To compute the total population for each of the group, use summarise() to sum up the population count. Then we arrange the data by PA, Age Group and Sex, followed by ungrouping the data for future operations on the grouping variables.\n\n\npopulation_sorted <-\n  population %>% \n  group_by(PA, AG, Sex, Time) %>% \n  summarise(Count = sum(Pop)) %>%\n  arrange(PA, AG, Sex) %>%\n  ungroup()\ntbl_df(population_sorted)\n\n\n# A tibble: 43,890 × 5\n   PA         AG     Sex      Time Count\n   <chr>      <ord>  <chr>   <dbl> <dbl>\n 1 Ang Mo Kio 0_to_4 Females  2000  4460\n 2 Ang Mo Kio 0_to_4 Females  2001  4320\n 3 Ang Mo Kio 0_to_4 Females  2002  4220\n 4 Ang Mo Kio 0_to_4 Females  2003  4010\n 5 Ang Mo Kio 0_to_4 Females  2004  3870\n 6 Ang Mo Kio 0_to_4 Females  2005  3640\n 7 Ang Mo Kio 0_to_4 Females  2006  3600\n 8 Ang Mo Kio 0_to_4 Females  2007  3670\n 9 Ang Mo Kio 0_to_4 Females  2008  3850\n10 Ang Mo Kio 0_to_4 Females  2009  4120\n# … with 43,880 more rows\n\nSelecting records using filter() and logical operator\nTo better illustrate the demographic change at planning area levels, a sum of five planning areas (Bedok, Clementi, Punggol, Novena and Woodlands) would be selected from five regions respectively (North, North-East, East, West and Central Region) by using filter() function.\n\n\npopulation_filtered <- population_sorted %>%\n  filter(PA == \"Bedok\" |\n           PA == \"Clementi\" |\n           PA == \"Novena\" |\n           PA == \"Punggol\" |\n           PA == \"Woodlands\" )\n\n\n\nModifying signs of population count\nLast step is to use mutate() function and ‘if_else’ to modify values in the ‘Count’ column by changing the signals of males (+) and females (-). This will lead to males at the right side and females at the left side of the plot.\n\n\npopulation_filtered <- population_filtered %>%\n  mutate(Count = if_else(Sex == 'Males', -Count, Count))\n\n\n\n4.0 Graph Plotting\nBuilding static plot using ggplot2\nIn this case, we use geom_bar() again to create a bar with ‘Count’ column as the initial y-axis. The explanation for the rest of the functions are listed below for your reference:coord_flip(): to flip the cartesian coordinates so that horizontal becomes vertical, and vertical becomes horizontal.scale_fill_manual(): to change legend labels and colors.scale_y_continuous(): to customize the y-axis (which is now at the bottom of the graph) breaks and labels.labs()：to set x and y-axis labels, add in titles and subtitles.theme_cowplot(): to set a cowplot theme from cowplot package.\nUsing facet to create multi-panel plots\nAs our data set comprises of population count from five planning areas, it is helpful to use the facet() function to generate small multiples (trellis plots), each displaying a different subset of the data.facet_wrap(), which wraps a 1d sequence of panels into 2d, is used instead of facet_grid() in this case as it allows a better use of screen space as the displays of the population pyramid are rectangular in shape. ‘PA’ serve as the parameter which organise the data into different subplots and the ‘n_row’ parameter specifies the number of rows in a facetted plot.\n\n\ng <- ggplot(population_filtered, aes(x = AG, y = Count, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.5) +\n  coord_flip() +\n  scale_y_continuous(n.breaks=12, labels=abs) +\n  labs(x = \"Age\", y = \"Population\", title = 'Age-Sex Pyramid of Singapore',\n       subtitle = 'Year: {closest_state}',\n       caption='Source: Singapore Department of Statistics') +\n  scale_fill_manual(values=c(\"darkred\", \"steelblue\"),\n                    name='',\n                    breaks=c(\"Males\", \"Females\"),\n                    labels=c(\"Males\", \"Females\")) +\n  cowplot::theme_cowplot() + \n  theme(axis.text=element_text(vjust=0.5, size = 8),\n        panel.grid.major.y = element_line(color='lightgray',linetype='dashed'),\n        legend.position = 'top',\n        legend.justification = 'center') +\n  facet_wrap(~ PA, nrow = 3) \n\n\n\nBuilding an interactive data visualisation\nTo make the age-sex population pyramid more interactive, we could utilise the transition_states() function to show the transition between several distinct stages of the data, in this case, the demographic structure change across the years. ‘Time’ is the column which holds the state levels in the data. The ‘transition_length’ parameter is used to indicate the relative length of the transition and it is set to 1 to indicate interval of years. This parameter will be recycled to match the number of states(e.g. years) in the data. The ‘state_length’ parameter is the relative length of the pause at the states, which will also be recycled to match the number of years.\nThe enter_() and exit_() function are used to define how new data should appear and how old data should disappear during the animated process. The modification type is set to ‘fade’ as this would reset alpha(transparency of the bar) to zero, making the elements fade in or out during the transition immediately.\nThe ease_aes() function defines how different aesthetics should be eased during transitions. For smoother appearance\nLast but not least, to animate the graph, the animate() function is used to take a gganim object and render it into an animation. The nature of the animation is dependent on the renderer, but defaults to using gifski to render it to a gif. Using various parameters, other details including height and width, fps(number of frames per second), duration (length of the animation), end pause (set rewind = TRUE so that pause at the end for some time and then rewind), res (resolution) could be specified.\n\n\ng <- g +\n  transition_states(Time, transition_length = 1, state_length = 1) +  \n  enter_fade() +\n  exit_fade() + \n  ease_aes('cubic-in')\n\nanimate(g, height = 1000, width = 1000, \n        fps = 20, duration = 15, \n        end_pause = 15, rewind = TRUE, \n        renderer = gifski_renderer('age_sex_pyramid.gif'), res = 100)\n\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-02-05T00:02:33+08:00",
    "input_file": "take-home-exercise-2.knit.md"
  },
  {
    "path": "posts/2022-02-04-take-home-exercise-1/",
    "title": "Take-home Exercise 1",
    "description": "In this take-home exercise, I would apply the skills learnt to create data visualisation by using ggplot2.",
    "author": [
      {
        "name": "Zhang Yi",
        "url": "https://www.linkedin.com/in/zhangyii/"
      }
    ],
    "date": "2022-01-25",
    "categories": [],
    "contents": "\n1.0 Introduction\nThis take-home exercise aims to apply the skills learnt to create: + a pareto chart showing the distribution of returns by product sub-category + a age-sex pyramid showing the demographic structure of Singapore by age cohort and gender.\nA Pareto chart is a type of chart that contains both bars and a line graph, where individual values are represented in descending order by bars, and the cumulative total is represented by the line. The left vertical axis is the frequency of occurrence, but it can alternatively represent cost or another important unit of measure. The right vertical axis is the cumulative percentage of the total number of occurrences, total cost, or total of the particular unit of measure. In market share study, Pareto charts are useful to reveal if the business is dominated by a handful of key products or customers.\nA Population Pyramid or “Age-Sex Pyramid” is a graphical illustration of the distribution of a population (typically that of a country or region of the world) by age groups and sex; it typically takes the shape of a pyramid when the population is growing. Males are usually shown on the left and females on the right, and they may be measured in absolute numbers or as a percentage of the total population.\nBefore processing to the next step, please use the code chunk below to install and launch the required packages in RStudio.\n\n\npackages = c('tidyverse', 'readxl', 'knitr')\n\nfor(p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p, character.only = T)\n}\n\n\n\n2.0 Pareto Chart\nImporting Data\nIn this exercise, superstore-2021 data set, an MS Excel workbook will be used. It consists of three worksheets, namely: Orders, People and Returns. First, import the data into R by using read_xls() of readr package.\n\n\norders <- read_xls(\"Data/Superstore-2021.xls\",\n                  sheet = \"Orders\")\nreturns <- read_xls(\"Data/Superstore-2021.xls\",\n                  sheet = \"Returns\")\n\n\n\nData Preparation\nJoining two dataframes\nIn order to produce a Pareto Chart which contains information on frequency of returns, we need to employee left_join() of dplyr to join the ‘Orders’ and ‘Returns’ worksheets by using Order ID as a unique identifier.\n\n\njoined_tab <- left_join(returns, orders,\n                        by = c('Order ID' = 'Order ID'))\n\n\n\nCount frequency of returns by sub-category using gtoup-by method\nTo achieve this, we need to use group-by() of dplyr package to group the data set by sub-category and summarise() to count the frequency of returns (i.e. n()) for each sub-category, a new dataframe named ‘freq_returned’ would be created to store the name of sub-categories and their respective number of returns. Please always remember to ungroup() after using groupby() as orelse you cannot performance any operations on the grouping variables, meaning they can’t be mutated or summarized.\n\n\nfreq_returned <- joined_tab %>%\n  group_by(`Sub-Category`) %>%\n  summarise('Returns' = n()) %>%\n  ungroup()\n\n\n\nSorting data and Computing cumulative frequency\nBy default, the resultant ‘freq-returned’ data frame is sorted by values of first column, in this case, the alphabetical order of ‘sub-category’ field. To plot a Pareto chart, we need to rearrange the order by sorting the data frame in a descending order of count of returns. To achieve this, we need to use the arrange() of dplyr package.\n\n\nfreq_sorted <- freq_returned %>%\n  arrange(desc(Returns))\n\n\n\nTo compute the cumulative frequency of returns, we need to use mutate() of dplyr package and cumsum() of Base R. mutate() adds a new variable ‘cumfreq’ while preserving existing ones and cumsum() returns a cumulative sums vector to the ‘cumfreq’ field.\n\n\nfreq_cum <- freq_sorted %>%\n  mutate(cumfreq = cumsum(Returns))\n\n\n\nPlotting of Graph using ggplot2\nTo plot a Pareto chart:\n1. Use ggplot function to specify the data and the aesthetics of the column to be used.\n2. Use geom_bar() to create a bar chart using ‘Returns’ field as y-axis to indicate the absolute value of count of returns. The purpose of the stat=‘identity’ is to force ggplot to identify the count field stipulated on the y axis.\n3. Use geom_point() to plot a point geometry () with the points indicating the cumulative frequency calculated (the point type (pch) equal to a circle) and add to the bar chart plotted.\n4. Use the geom_line() function to connect the points and to specify what data type to group to (by default, group = 1)\n5. Use a few functions to edit the scale and finish the touch-up:\nscale_x_discrete(): use ‘limits’ argument to pass a character vector to defines values of the scale and their orderscale_y_continuous(): use ‘breaks’ and ‘limits’ arguments to pass vectors specifying the position and limits of scaleannotate(): add text labels for the axislabs(): add in title and name the axistheme(): change the background color to white for clear visualization\n\n\n# Defining variables to be used later for adjustment of scale\nnr <- nrow(freq_cum)\nN <- sum(freq_cum$Returns)\nDf_ticks <- data.frame(xtick0 = rep(nr +.55, 11), xtick1 = rep(nr +.59, 11), ytick = seq(0, N, N/10))\ny2 <- c(\"  0%\", \" 10%\", \" 20%\", \" 30%\", \" 40%\", \" 50%\", \" 60%\", \" 70%\", \" 80%\", \" 90%\", \"100%\")\n\n\n# Creating Pareto Chart with ggplot2\nggplot(freq_cum, aes(x=freq_cum$`Sub-Category`, y=freq_cum$Returns))+\n  geom_bar(fill = 'light blue', stat='identity') +\n  geom_point(aes(y=freq_cum$cumfreq), pch = 19, color = 'black', size = 0.8) +\n  geom_line(aes(y=freq_cum$cumfreq, group = 1), color = 'black', size = 0.5) + \n  scale_x_discrete(limits=freq_cum$`Sub-Category`) +\n  scale_y_continuous(breaks=seq(0, N, N/10), limits=c(-.02 * N, N * 1.02)) +\n  guides(fill = FALSE, color = FALSE) + \n  annotate(\"rect\", xmin = nr + .55, xmax = nr + 1, \n             ymin = -.02 * N, ymax = N * 1.02, fill = \"white\") +\n  annotate(\"text\", x = nr + .8, y = seq(0, N, N/10), label = y2, size = 3.5) +\n  labs(title = 'Pareto Chart of Returns by sub-category', x = 'Sub-Category', y = 'absolute frequency') +\n  theme_bw()\n\n\n\n\n3.0 Age-Sex Pyramid\nImporting Data\nThe dataset used in this exercise is Singapore Residents by Planning Area/ Subzone, Age Group, Sex and Type of Dwelling, June 2021.csv, published by the Singapore Department of Statistics and was downloaded from the website.\nUsing read_csv() of readr package, we would be able to read delimited files into a tibble.\n\n\npopulation <- read_csv(\"Data/respopagesextod2021.csv\")\n\n\n\nData Preparation\nSelecting relevant columns\nAfter examining the imported data, we found out that to plot a age-sex pyramind, we only need values from 3 columns: age group, sex, and count of population within the age group and sex. So we use select() to create a new dataframe using only these relevant columns.\n\n\npopulation_selected <- population %>%\n  select(AG, Sex, Pop) \n\n\n\n\nComputing the frequency count by age and gender\nNext, we use groupby() to group the data set by age group and sex (i.e. males aged from 0 to 4) and then use summarise() to sum up the population count across different planning areas and residential properties. One more thing to note is that we need to use unique() to preserve original order of appearance of age group and specify this order to the grouped dataset by using factor().\n\n\n# Fixing order of age group\nAG_orders <- unique(population_selected$AG)\npopulation_selected$AG <- factor(population_selected$AG, levels = AG_orders, ordered = TRUE)\n\n# Computing the frequency count using group-by method\npopulation_selected <-\n  population_selected %>% \n  group_by(AG, Sex) %>% \n  summarise(Freq = sum(Pop)) \n\n\n\n\nIf we do not fix the order, the grouped data set may be sorted wrongly based on numerical order of the first digit of the age group, in this case, age group 5-9 would come after 45-49 as initial digit ‘5’ comes after ‘4’.\n\nModifying signs of population count\nIn order to plot a back-to-back bar chart as indicated in the population pyramid, the last step of data preparation is that we need to use mutate() function and ‘if_else’ to modify values in the ‘Freq’ column by changing the signals of males (+) and females (-). This will lead to males at the right side and females at the left side of the plot.\n\n\npopulation_count <- population_selected %>%\n  mutate(Freq = if_else(Sex == 'Males', -Freq, Freq))\n\n\n\n\nPlotting of Graph using ggplot2\nIn this case, we use geom_bar() again to create a bar with ‘Freq’ column as the initial y-axis. The explanation for the rest of the functions are listed below for your reference:coord_flip(): to flip the cartesian coordinates so that horizontal becomes vertical, and vertical becomes horizontal.scale_fill_manual(): to change legend labels and colors.scale_x_discrete: to customize the x-axis (now at the left side of the graph).scale_y_continuous(): to customize the y-axis (which is now at the bottom of the graph) breaks and labels.labs()：to set x and y-axis labels, add in titles and subtitles.theme_cowplot(): to set a cowplot theme from cowplot package.\n\n\nthe_order <- population_count$AG\n\n# Plotting the age-sex pyramid using ggplot2\nggplot(population_count, aes(x = AG, y = Freq, group = Sex, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.75) +\n  coord_flip() +\n  scale_x_discrete(limits = the_order) +\n  scale_y_continuous(breaks=seq(-150000,150000,50000),\n                     labels = paste0(as.character(c(seq(150, 0, -50), seq(50, 150, 50))), \"K\"))+\n  labs(x = \"Age\", y = \"Population\", title = 'Age-Sex Pyramid of Singapore for 2021 Jun',\n       caption='Source: Singapore Department of Statistics') +\n  theme(legend.position = \"bottom\",\n        legend.title = element_blank(),\n        plot.title = element_text(hjust = 0.5),\n        panel.background = element_rect(fill =  \"grey90\")) +\n  scale_fill_manual(values=c(\"darkred\", \"steelblue\"),\n                    name='',\n                    breaks=c(\"Males\", \"Females\"),\n                    labels=c(\"Males\", \"Females\"))+ \n  cowplot::theme_cowplot()+\n  theme(axis.text.x=element_text(vjust=.5),\n        panel.grid.major.y = element_line(color='lightgray',linetype='dashed'),\n        legend.position = 'top',\n        legend.justification = 'center')\n\n\n\n\n\n\n\n",
    "preview": "posts/2022-02-04-take-home-exercise-1/take-home-exercise-1_files/figure-html5/unnamed-chunk-7-1.png",
    "last_modified": "2022-02-04T23:59:50+08:00",
    "input_file": "take-home-exercise-1.knit.md"
  }
]
